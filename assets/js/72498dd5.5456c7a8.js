"use strict";(self.webpackChunkmy_projects=self.webpackChunkmy_projects||[]).push([[849],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=u(n),m=a,k=s["".concat(c,".").concat(m)]||s[m]||d[m]||i;return n?r.createElement(k,l(l({ref:t},p),{},{components:n})):r.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[s]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},l=void 0,o={unversionedId:"Machine Learning - Data Science/Neural Network",id:"Machine Learning - Data Science/Neural Network",title:"Neural Network",description:"This is a neural network implemented in python to recognize handwritten digits. The network is trained using the MNIST dataset available at Kaggle. It is created using NumPy and Pandas. It is implemented from scratch without using any deep learning libraries.",source:"@site/docs/Machine Learning - Data Science/Neural Network.md",sourceDirName:"Machine Learning - Data Science",slug:"/Machine Learning - Data Science/Neural Network",permalink:"/kannanjayachandran.My-Projects.github.io/Machine Learning - Data Science/Neural Network",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Neural Network Accuracy Visualizer",permalink:"/kannanjayachandran.My-Projects.github.io/Machine Learning - Data Science/Neural Network Accuracy Visualizer"},next:{title:"wafer",permalink:"/kannanjayachandran.My-Projects.github.io/Machine Learning - Data Science/wafer"}},c={},u=[{value:"Architecture",id:"architecture",level:2},{value:"This neural network uses",id:"this-neural-network-uses",level:2},{value:"Activation functions",id:"activation-functions",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Usage",id:"usage",level:2},{value:"Metrics",id:"metrics",level:2},{value:"Link to Project",id:"link-to-project",level:3}],p={toc:u},s="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is a neural network implemented in python to recognize handwritten digits. The network is trained using the ",(0,a.kt)("strong",{parentName:"p"},"MNIST")," dataset available at ",(0,a.kt)("strong",{parentName:"p"},"Kaggle"),". It is created using ",(0,a.kt)("strong",{parentName:"p"},"NumPy")," and ",(0,a.kt)("strong",{parentName:"p"},"Pandas"),". It is implemented from scratch without using any deep learning libraries."),(0,a.kt)("h2",{id:"architecture"},"Architecture"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Input layer: 784 neurons (28x28 pixels) arranged in the for of a matrix.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Hidden layer: 10 neurons")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Output layer: 10 neurons (0-9)"))),(0,a.kt)("h2",{id:"this-neural-network-uses"},"This neural network uses"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Forward propagation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"BackPropagation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Gradient descent")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"One-hot-encoding"))),(0,a.kt)("h2",{id:"activation-functions"},"Activation functions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"ReLU")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"SoftMax"))),(0,a.kt)("h2",{id:"dependencies"},"Dependencies"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"numpy"),(0,a.kt)("li",{parentName:"ul"},"pandas")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Clone the repository"),(0,a.kt)("li",{parentName:"ul"},"Run the ",(0,a.kt)("inlineCode",{parentName:"li"},"main.ipynb")," file")),(0,a.kt)("h2",{id:"metrics"},"Metrics"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This neural network contains only one hidden layer and there is no regularization. There are a variety of ways to improve the accuracy of the network.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Accuracy: 84.5% (Training) and 81.9% (Testing)")),(0,a.kt)("h3",{id:"link-to-project"},(0,a.kt)("a",{parentName:"h3",href:"https://github.com/kannanjayachandran/ML-Models/tree/main/Handwriting%20Recognizer"},"Link to Project")))}d.isMDXComponent=!0}}]);